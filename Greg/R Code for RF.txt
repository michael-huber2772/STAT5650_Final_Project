######Commments######
-hotelchanged.csv: to use hotel as the response variable like in the nest data, I changed the hotel
 column to indicate either not canceled, canceled resort hotel, or canceled city hotel, then I removed
 is_canceled. I used SAS and exported the csv file. the confusion matrix shows a lot!

-randomForests doesn't handle missing vlaues, so i got an error message. I looked up how to fix it:
 https://stackoverflow.com/questions/8370455/how-to-use-random-forests-in-r-with-missing-values
 since there are only 4 missing observations, all in the children column, I dropped them.
 ...ended up using na.omit(hotel) to make the classsum function work

-randomForests error: Can not handle categorical predictors with more than 53 categories.
 Therefore, I dropped the country, agent, company, and reservation_status_date columns (could we
 turn reservation_status_date into a numeric? Is it worth it?).

-I dropped reservation_status too, it is the same as is_canceled.

-not sure if the droplevels function is necessary, I kept it there for now.


######Questions######
-how should we try to predict the "peak time for maximum bookings?" Would it be better to predict
 the time of year (using arrival_date_week_number) when there are the most cancellations?...and
 same with the market_segments question.
-Which variable can we try to identify no-shows with?
-Look at number of special requests as the response variable? that might be funny.


######KAPPA AND CLASSSUM FUNCTIONS, SEE CLASS.SUMNOKAPPA INCLUDED######

kappa=function(x){
      n=sum(x)
      pobs=(x[1,1]+x[2,2])/n
      pexp=(sum(x[1,])*sum(x[,1])+sum(x[2,])*sum(x[,2]))/n^2
      kappa=(pobs-pexp)/(1-pexp)
      t1=0
      t2=0
      t3=0
      pii=x/n
      pidot=apply(pii,1,sum)
      pdotj=apply(pii,2,sum)
      for(i in 1:2){
            t1 = t1 + pii[i,i]*((1-pexp) - (1-pobs)*(pidot[i]+pdotj[i]))^2
      }
      t2 = pii[1,2]*(pdotj[1]+pidot[2])^2 + pii[2,1]*(pdotj[2] + pidot[1])^2
      t3 = (pobs*pexp-2*pexp+pobs)^2
      vhat = (t1 + t2*(1-pobs)^2 -t3)/(n*(1-pexp)^4)
      se=sqrt(vhat)
      return(c(kappa,se))
}


class.sum=function(truth,predicted){
     xt=table(truth,round(predicted+0.000001))
     pcc=round(100*sum(diag(xt))/sum(xt),2)
     spec=round(100*xt[1,1]/sum(xt[1,]),2)
     sens=round(100*xt[2,2]/sum(xt[2,]),2)
     kap=round(kappa(xt)[1],4)
     au=round(roc.area(truth,predicted)$A,4)
     return(cbind(c("Percent Correctly Classified = ","Specificity = ","Sensitivity = ","Kappa =","AUC= "),c(pcc,spec,sens,kap,au)))
     }

class.sumnokappa=function(truth,predicted){
     xt=table(truth,round(predicted+0.000001))
     pcc=round(100*sum(diag(xt))/sum(xt),2)
     spec=round(100*xt[1,1]/sum(xt[1,]),2)
     sens=round(100*xt[2,2]/sum(xt[2,]),2)
     
     au=round(roc.area(truth,predicted)$A,4)
     return(cbind(c("Percent Correctly Classified = ","Specificity = ","Sensitivity = ","AUC= "),c(pcc,spec,sens,au)))
     }


######Packages Loaded: Ada, caret, e1071, EZtune, gbm, randomforest, verification######


hotel <- read.csv("~/Uni/Stat 5650 SLDM1/Final Project/hotel.csv")
View(hotel)




####################################################
################# RANDOM FORESTS ###################
####################################################

set.seed(5341)

hotel1 = subset(na.omit(hotel), select = -c(country, agent, company, reservation_status, reservation_status_date))
hotel1.rf=randomForest(as.factor(is_canceled)~ . ,importance=TRUE,keep.forest=TRUE,data=hotel1)

hotel1.rf$confusion
class.sum(hotel1$is_canceled,predict(hotel1.rf,type="prob")[,2])

varImpPlot(hotel1.rf, scale=FALSE)

##Partial Dependence Plots: top eight predictor variables, plus hotel##
set.seed(5341)
par(mfrow=c(1,1))
partialPlot(hotel1.rf,hotel1,deposit_type,which.class=1)
partialPlot(hotel1.rf,hotel1,lead_time,which.class=1)
partialPlot(hotel1.rf,hotel1,total_of_special_requests,which.class=1)
partialPlot(hotel1.rf,hotel1,market_segment,which.class=1)
partialPlot(hotel1.rf,hotel1,adr,which.class=1)
partialPlot(hotel1.rf,hotel1,customer_type,which.class=1)
partialPlot(hotel1.rf,hotel1,arrival_date_month,which.class=1)
partialPlot(hotel1.rf,hotel1,assigned_room_type,which.class=1)
partialPlot(hotel1.rf,hotel1,hotel,which.class=1)

###### Random Forests after Variable Selection, top 7 chosen, then top 4 chosen ######

hotel1.rf7=randomForest(as.factor(is_canceled)~ deposit_type+lead_time+total_of_special_requests+market_segment+adr+customer_type+arrival_date_month+assigned_room_type ,data=hotel1)

hotel1.rf7$confusion
class.sum(hotel1$is_canceled,predict(hotel1.rf7,type="prob")[,2])


hotel1.rf4=randomForest(as.factor(is_canceled)~ deposit_type+lead_time+total_of_special_requests+market_segment,data=hotel1)

hotel1.rf4$confusion
class.sum(hotel1$is_canceled,predict(hotel1.rf4,type="prob")[,2])

###### Separated Hotel Types ######

ResortHotel = droplevels(subset(hotel1, hotel=="Resort Hotel", select=-hotel))

ResortHotel.rf=randomForest(as.factor(is_canceled)~. , importance=TRUE,data=ResortHotel)
ResortHotel.rf$confusion
class.sum(ResortHotel$is_canceled,predict(ResortHotel.rf,type="prob")[,2])
varImpPlot(ResortHotel.rf, scale=FALSE)


CityHotel = droplevels(subset(hotel1, hotel=="City Hotel",select=-hotel))

CityHotel.rf=randomForest(as.factor(is_canceled)~. , importance=TRUE,data=CityHotel)
CityHotel.rf$confusion
class.sum(CityHotel$is_canceled,predict(CityHotel.rf,type="prob")[,2])
varImpPlot(CityHotel.rf, scale=FALSE)

###### Hotel as Response Variable #####

hotelchanged <- read.csv("~/Uni/Stat 5650 SLDM1/Final Project/STAT5650_Final_Project/Greg/hotelchanged.csv")

set.seed(5341)
hotelchanged.rf=randomForest(as.factor(hotel)~ . , importance=TRUE,keep.forest=TRUE,data=hotelchanged)

hotelchanged.rf$confusion

#################################################################################